/**
 * c-inp.css
 * @version 1.0.20
 * @summary 09-01-2020
 * @author Mads Stoumann
 * @description Stylesheet for Inputs.
	Variables are concatinated from: 
	- element-prefix + 
	- optional subelement +
	- emmet-css-abbreviation + 
	- modifier (:active, :disabled, :focus, :hover)
	More on emmett: https://docs.emmet.io/cheat-sheet/
*/
@import 'config.css';

:root {
	--inp-ai: center;
	--inp-bdc: var(--c-grey-200);
	--inp-bdrs: var(--u-150);
	--inp-bds: solid;
	--inp-bdw: var(--u-100);
	--inp-bgc--dark: #202123;
	--inp-bgc: transparent;
	--inp-bxsh--sz: 0;
	--inp-bxsh: var(--c-grey-100);
	--inp-c--dark: #9aa0a6;
	--inp-c: var(--c-txt);
	--inp-cur: initial;
	--inp-d: flex;
	--inp-ff: inherit;
	--inp-fx: 1;
	--inp-fz: var(--u-300);
	--inp-inv-c: var(--c-red-700);
	--inp-m: 0 0 var(--u-475) 0;
	--inp-ol: none;
	--inp-p: var(--u-225);
	--inp-plh-c: var(--c-grey-200);
	--inp-pos: relative;
	--inp-val-c: var(--c-green-700);
	--inp-w: auto;

	/* Disabled */
	--inp-bgc--dis: var(--c-grey-200);

	/* Focus */
	--inp-bgc--foc: var(--c-yellow-50);
	--inp-bgc--foc-dark: hsl(220, 4%, 20%);

	/* Error Label */
	--inp-err-fz: var(--u-250);
	--inp-err-off: var(--u-150); /* Distance from bottom of `<input>` to err-label */
	--inp-err-m: 0;
	--inp-err-pos: absolute;
	--inp-err-t: calc(100% + var(--inp-err-off));

	/* Icons */
	--inp-ico-c: var(--c-grey-300);
	--inp-ico-h: 1.5em;
	--inp-ico-m: var(--u-175);
	--inp-ico-w: 1.5em;
}

/* Main wrapper for `<input>` and icons */
.c-inp,
.c-frm__fld-input {
	align-items: var(--inp-ai);
	background-color: var(--inp-bgc);
	background-color: var(--inp-bgc);
	border-color: var(--inp-bdc);
	border-radius: var(--inp-bdrs);
	border-style: var(--inp-bds);
	border-width: var(--inp-bdw);
	box-shadow: var(--inp-bxsh--sz) var(--inp-bxsh);
	box-sizing: border-box;
	color: var(--inp-c);
	display: var(--inp-d);
	flex: var(--inp-fx);
	font-family: var(--inp-ff);
	font-size: var(--inp-fz);
	margin: var(--inp-m);
	/* To ensure same height with/without icon, deduct regular padding from icon-height for top/bottom */
	padding: calc(var(--inp-ico-h) - var(--inp-p)) var(--inp-p);
	position: var(--inp-pos);
	width: var(--inp-w);
}
.c-inp[hidden] {
	display: none;
}
.c-inp::placeholder,
.c-inp__inner::placeholder {
	color: var(--inp-plh-c);
}
/* When extra, outer wrapper is applied (for pre- and suffix), reset some variables/properties */
.c-frm__fld-input  {
	--inp-pos: relative;
	align-items: inherit;
	padding: 0;
}
.c-inp__error {
	color: var(--inp-inv-c);
	font-size: var(--inp-err-fz);
	inset-inline-start: 0;
	left: 0;
	margin: var(--inp-err-m);
	position: var(--inp-err-pos);
	top: var(--inp-err-t);
}
/* `inset-inline-start` does currently not behave like `left: 0;`, hence the need for `left` and `right` */
[dir="rtl"] .c-inp__error {
	left: auto;
	right: 0;
}
.c-inp__ico--left {
	--ico-bgc: var(--inp-ico-c);
	--ico-h: var(--inp-ico-h);
	--ico-w: var(--inp-ico-w);
	margin-inline-end: var(--inp-ico-m);
}
.c-inp__ico--right {
	--ico-bgc: var(--inp-ico-c);
	--ico-h: var(--inp-ico-h);
	--ico-w: var(--inp-ico-w);
	margin-inline-start: var(--inp-ico-m);
}
.c-inp__ico--left + .c-inp {
	padding-inline-start: 0;
}
.c-inp__inner {
	/* The `<input>`-element itself, styling will be applied to wrapper */
	-moz-appearance: none;
	-webkit-appearance: none;
	background-color: transparent;
	border: 0;
	box-sizing: border-box;
	color: inherit;
	cursor: var(--inp-cur);
	flex: 1;
	font-size: inherit;
	outline: var(--inp-ol);
}

/* Raw `<input>`-use of `c-inp`: */
.c-inp[type] ~ .c-inp__error {
	--inp-err-m: 0 0 0.875rem 0;
	--inp-err-pos: relative;
}

/* TODO */
.c-inp__color {
	-webkit-appearance: none;
	border: 1px solid #EEE;
	border-radius: 50%;
	height: 2.5rem;
	padding: 0;
	width: 2.5rem;
}

.c-inp__color::-webkit-color-swatch-wrapper {
	padding: 0;	
}
.c-inp__color::-webkit-color-swatch {
	border: none;
	border-radius: 50%;
}
.c-inp__list {
	background-color: #FFF;
	border-color:var(--inp-bdc);
	border-style: var(--inp-bds);
	border-width: var(--inp-bdw);
	box-sizing: border-box;
	left: 0;
	list-style: none;
	margin: 0;
	padding: 0;
	position: absolute;
	right: 0;
	top: 100%;
	z-index: 500;
}
.c-inp__list-item {
	padding: 0.5rem 1rem; 
}
.c-inp__list-item:focus {
	background-color: tomato;
}

/* State */
.c-inp[type]:disabled {
	background-color: var(--inp-bgc--dis);
}
.c-inp__inner:disabled,
.c-inp--disabled {
	--inp-bgc: var(--inp-bgc--dis);
	--inp-cur: not-allowed;
}
.c-inp:focus-within {
	--inp-bgc: var(--inp-bgc--foc);
}
/* If input is required and placeholder is NOT shown, it has a value. If that value is INVALID, change icon */
.c-inp__inner:required:not(:placeholder-shown):invalid + .c-inp__ico--right {
	--ico-bgc: var(--inp-inv-c);
	--ico-bgi: var(--i-error);
}
/* If input is required and placeholder is NOT shown, it has a value. If that value is VALID, change icon */
.c-inp__inner:required:not(:placeholder-shown):valid + .c-inp__ico--right {
	--ico-bgc: var(--inp-val-c);
	--ico-bgi: var(--i-check);
}
/* If input is required and placeholder is NOT shown, it has a value. If that value is INVALID, show error-text */
.c-inp:required:not(:placeholder-shown):invalid ~ .c-inp__error,
.c-inp__inner:required:not(:placeholder-shown):invalid ~ .c-inp__error {
	display: block;
}

/* Dark Mode */
@media (prefers-color-scheme: dark) {
	.c-inp {
		--inp-bgc: var(--inp-bgc--dark);
		--inp-bgc--foc: var(--inp-bgc--foc-dark);
		--inp-c: var(--inp-c--dark);
		--inp-inv-c: var(--c-red-200);
		--inp-plh-c: var(--c-grey-700);
		--inp-val-c: var(--c-green-200);
	}
}